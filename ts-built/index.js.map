{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,+CAAyC;AAEzC,2CAAqC;AAErC,MAAM,MAAM,GAAa,IAAI,sBAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;AACxE,MAAM,OAAO,GAAa,IAAI,sBAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AACnE,MAAM,GAAG,GAAa,IAAI,sBAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAC5D,MAAM,KAAK,GAAa,IAAI,sBAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAC3D,MAAM,OAAO,GAAa,IAAI,sBAAQ,CAAC,SAAS,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAEtE;;;;uBAIuB;AAEvB;;;EAGE;AACF,qBAAqB;AACrB,MAAM,MAAM,GAAG,KAAM,CAAC;AACtB,qBAAqB;AACrB,MAAM,GAAG,GAAG,IAAK,CAAC;AAClB,oBAAoB;AACpB,MAAM,OAAO,GAAG,CAAC,CAAC;AAElB,MAAM,IAAI,GAAG,GAAS,EAAE;IACvB,OAAO,CAAC,GAAG,CAAC,WAAW,MAAM,EAAE,CAAC,CAAC;IACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;IAC3B,OAAO,CAAC,GAAG,CAAC,YAAY,OAAO,EAAE,CAAC,CAAC;IAEnC,MAAM,kBAAkB,GAAG,kBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACrD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,kBAAkB,CAAC,OAAO,GAAG,MAAM,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IAEjG,OAAO,CAAC,GAAG,CAAC,kBAAkB,SAAS,kBAAkB,SAAS,UAAU,SAAS,GAAG,CAAC,4DAA4D,CAAC,CAAC;IACvJ,MAAM,mBAAmB,GAAG,kBAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;IAC1D,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC;IACvD,OAAO,CAAC,GAAG,CAAC,0CAA0C,QAAQ,iBAAiB,QAAQ,UAAU,QAAQ,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAElI,CAAC,CAAA,CAAA;AAED,IAAI,EAAE,CAAC","sourcesContent":["import { Artifact } from './Artifact.js';\r\nimport { arti_consts } from './artifact_constants.js';\nimport { kokomi } from './kokomi.js';\r\n\r\nconst flower: Artifact = new Artifact('flower', 'attack', 1, { hp: 1 });\r\nconst feather: Artifact = new Artifact('feather', 'ur mom', 1, {});\r\nconst cup: Artifact = new Artifact('cup', 'geo_dmg', 1, {});\nconst watch: Artifact = new Artifact('watch', 'er', 1, {});\r\nconst circlet: Artifact = new Artifact('circlet', \"crit_rate\", 1, {});\n\r\n/*console.log(flower);\r\nconsole.log(feather);\r\nconsole.log(cup);\nconsole.log(watch);\nconsole.log(circlet);*/\n\n/*\n * EDIT STUFF HERE\n *\n*/\n// character's health\nconst health = 20_000;\n// character's attack\nconst atk = 1_000;\n// character e level\nconst e_level = 5;\n\nconst main = async () => {\n\tconsole.log(`Health: ${health}`);\n\tconsole.log(`ATK: ${atk}`);\n\tconsole.log(`E level: ${e_level}`);\n\n\tconst e_level_hp_scaling = kokomi.e_scaling[e_level];\n\tconst e_healing = Math.round((e_level_hp_scaling.hp_mult * health) + e_level_hp_scaling.hp_flat);\n\n\tconsole.log(`E healing: \\n  ${e_healing} (per tick)\\n  ${e_healing} * 7 = ${e_healing * 7} total (initial hit + tick every 2 seconds for 12 seconds)`);\n\tconst e_level_atk_scaling = kokomi.e_scaling[e_level].dmg;\n\tconst e_damage = Math.round(atk * e_level_atk_scaling);\n\tconsole.log(`E base damage(no buffs/resistance):\\n  ${e_damage}(per tick)\\n  ${e_damage} * 7 = ${e_damage * 7} total (7 ticks)`);\n\t\n}\n\nmain();"]}